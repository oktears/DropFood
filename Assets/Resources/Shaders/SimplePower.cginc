
// Upgrade NOTE: excluded shader from DX11 and Xbox360 because it uses wrong array syntax (type[size] name)
#pragma exclude_renderers d3d11 xbox360

//#define power_data_n float[5]
//#define power_data_x power_data_n[5]
//


// power_data_01[x][n]  =>  power(x, n)
// x :  total 21  :  0, 0.05, 0.1, 0.15, 0.2, 0.25, ..., 0.9, 095, 1
// n :  total 11  :  0.001, 0.1, 0.2 , 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
//#define power_data_01  power_data_x(  \
//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
//	0.99701, 0.74113, 0.54928, 0.40709, 0.30171, 0.22361, 0.16572, 0.12282, 0.09103, 0.06746, 0.05000, \
//	0.99770, 0.79433, 0.63096, 0.50119, 0.39811, 0.31623, 0.25119, 0.19953, 0.15849, 0.12589, 0.10000, \
//	0.99810, 0.82720, 0.68426, 0.56601, 0.46821, 0.38730, 0.32037, 0.26501, 0.21922, 0.18134, 0.15000, \
//	0.99839, 0.85134, 0.72478, 0.61703, 0.52531, 0.44721, 0.38073, 0.32413, 0.27595, 0.23492, 0.20000, \
//	0.99861, 0.87055, 0.75786, 0.65975, 0.57435, 0.50000, 0.43528, 0.37893, 0.32988, 0.28717, 0.25000, \
//	0.99880, 0.88657, 0.78600, 0.69685, 0.61780, 0.54772, 0.48559, 0.43051, 0.38168, 0.33838, 0.30000, \
//	0.99895, 0.90034, 0.81061, 0.72983, 0.65709, 0.59161, 0.53265, 0.47957, 0.43177, 0.38874, 0.35000, \
//	0.99908, 0.91244, 0.83255, 0.75966, 0.69314, 0.63246, 0.57708, 0.52655, 0.48045, 0.43838, 0.40000, \
//	0.99920, 0.92325, 0.85240, 0.78698, 0.72658, 0.67082, 0.61934, 0.57181, 0.52792, 0.48741, 0.45000, \
//	0.99931, 0.93303, 0.87055, 0.81225, 0.75786, 0.70711, 0.65975, 0.61557, 0.57435, 0.53589, 0.50000, \
//	0.99940, 0.94197, 0.88730, 0.83581, 0.78731, 0.74162, 0.69858, 0.65804, 0.61986, 0.58388, 0.55000, \
//	0.99949, 0.95020, 0.90288, 0.85792, 0.81519, 0.77460, 0.73602, 0.69937, 0.66454, 0.63145, 0.60000, \
//	0.99957, 0.95784, 0.91745, 0.87877, 0.84172, 0.80623, 0.77223, 0.73967, 0.70849, 0.67861, 0.65000, \
//	0.99964, 0.96496, 0.93115, 0.89852, 0.86704, 0.83666, 0.80734, 0.77906, 0.75176, 0.72542, 0.70000, \
//	0.99971, 0.97164, 0.94409, 0.91731, 0.89130, 0.86603, 0.84147, 0.81760, 0.79442, 0.77189, 0.75000, \
//	0.99978, 0.97793, 0.95635, 0.93525, 0.91461, 0.89443, 0.87469, 0.85539, 0.83651, 0.81805, 0.80000, \
//	0.99984, 0.98388, 0.96802, 0.95241, 0.93706, 0.92195, 0.90709, 0.89247, 0.87808, 0.86393, 0.85000, \
//	0.99989, 0.98952, 0.97915, 0.96889, 0.95873, 0.94868, 0.93874, 0.92890, 0.91917, 0.90953, 0.90000, \
//	0.99995, 0.99488, 0.98979, 0.98473, 0.97969, 0.97468, 0.96969, 0.96473, 0.95980, 0.95489, 0.95000, \
//	1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000 \
//	)

inline float gameley_power_n(float x, int n)
{
	float y, z;
	if (x < 0.00001)
		return 0;
	switch (n)
	{
	case 0:
		return 1;
	case 1:
		return x;
	case 2:
		return x*x;
	case 3:
		return x*x*x;
	case 4:
		y = x*x;
		return y*y;
	case 5:
		return x*x*x*x*x;
	case 6:
		y = x*x*x;
		return y*y;
	case 7:
		y = x*x*x;
		y *= y;
		return x*y;
	case 8:
		y = x*x;
		y *= y;
		y *= y;
		return y;
	case 9:
		y = x*x*x;
		return y*y*y;
	case 10:
		y = x*x;
		z = y*y;
		return z*z*y;
	default:
		y = x*x;
		z = y*y;
		return z*z*y;
	}

}

// x must be in (0,1), n>0
inline float gameley_power_01(float x, float n)
{
	if ( n<1 )
	{ 
		int xIndex0, xIndex1, nIndex0, nIndex1; 
		xIndex0 = (int)(x * 20);  //    x / 0.05 取整
		xIndex1 = xIndex0 + 1;

		nIndex0 = (int)(n * 10);  //  n / 0.1 取整
		nIndex1 = nIndex0 + 1;

		float value0, value00, value01, value1, value10, value11, factor;
		factor = (x - xIndex0)*20;

		//value00 = power_data_01[xIndex0][nIndex0];
		//value01 = power_data_01[xIndex1][nIndex0];
		//value0 = lerp(value00, value01, factor);

		//value10 = power_data_01[xIndex0][nIndex1];
		//value11 = power_data_01[xIndex1][nIndex1];
		//value1 = lerp(value10, value11, factor);

		//factor = (n - nIndex0) * 10;

		return lerp(value0, value1, factor);
	}
	else 
	{
		int n0 = (float)n;
		int n1 = n0 + 1;
		float factor = n - n0;
		float value0 = gameley_power_n(x, n0);
		float value1 = gameley_power_n(x, n1);

		return lerp(value0, value1, factor);
	}
}


